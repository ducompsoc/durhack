// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["typedSql"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Interest {
    id         Int    @id @default(autoincrement())
    firstNames String @map("first_names") @db.VarChar(256)
    lastNames  String @map("last_names") @db.VarChar(256)
    email      String @unique @db.VarChar(256)
    year       Int    @default(2024)
}

model User {
    keycloakUserId String          @id @map("keycloak_user_id") @db.Uuid
    tokenSet       TokenSet?
    sessions       SessionRecord[]
    userCv         UserCV?
    userInfo       UserInfo?
    userFlags      UserFlag[]
    userConsents   UserConsent[]
}

model UserCV {
    userId      String @id() @map("user_id") @db.Uuid()
    user        User   @relation(fields: [userId], references: [keycloakUserId])
    filename    String
    contentType String @map("content_type")
    content     Bytes

    updatedAt DateTime @updatedAt @map("updated_at")
}

model UserInfo {
    userId String @id @map("user_id") @db.Uuid
    user   User   @relation(fields: [userId], references: [keycloakUserId])

    applicationStatus          UserApplicationStatus @default(unsubmitted) @map("application_status")
    applicationSubmittedAt     DateTime?             @map("application_submitted_at")
    applicationAcceptedAt      DateTime?             @map("application_accepted_at")
    applicationStatusUpdatedAt DateTime?             @map("application_status_updated_at")

    cvUploadChoice      CvUploadChoice       @default(indeterminate) @map("cv_upload_choice")
    age                 Int?                 @db.SmallInt
    university          String?              @db.VarChar(50)
    graduationYear      Int?                 @map("graduation_year")
    levelOfStudy        String?              @map("level_of_study") @db.VarChar(50)
    countryOfResidence  String?              @map("country_of_residence") @db.Char(3)
    tShirtSize          String?              @map("tshirt_size") @db.Char(3)
    gender              Gender?
    ethnicity           Ethnicity?
    hackathonExperience HackathonExperience? @map("hackathon_experience")
    accessRequirements  String?              @map("access_requirements") @db.Text()

    updatedAt DateTime @updatedAt @map("updated_at")
}

model UserFlag {
    userId   String @map("user_id") @db.Uuid
    user     User   @relation(fields: [userId], references: [keycloakUserId])
    flagName String @map("flag_name")

    @@id(fields: [userId, flagName], name: "id", map: "user_flag:user_id_and_flag_name")
    @@index(fields: [flagName])
}

model UserConsent {
    userId      String  @map("user_id") @db.Uuid
    user        User    @relation(fields: [userId], references: [keycloakUserId])
    consentName String  @map("consent_name")
    choice      Boolean

    @@id(fields: [userId, consentName], name: "id", map: "user_consent:user_id_and_consent_name")
}

model TokenSet {
    userId String @id @map("user_id") @db.Uuid
    user   User   @relation(fields: [userId], references: [keycloakUserId])

    tokenType    String?   @map("token_type")
    accessToken  String?   @map("access_token")
    idToken      String?   @map("id_token")
    refreshToken String?   @map("refresh_token")
    scope        String?
    accessExpiry DateTime? @map("access_expiry") @db.Timestamp(0)
    sessionState String?   @map("session_state")
}

model SessionRecord {
    sessionRecordId String    @id @map("session_record_id")
    userId          String?   @map("user_id") @db.Uuid
    user            User?     @relation(fields: [userId], references: [keycloakUserId])
    data            Json
    expiresAt       DateTime? @map("expires_at")
    createdAt       DateTime  @default(now()) @map("created_at")
    updatedAt       DateTime  @updatedAt @map("updated_at")

    @@index([userId])
}

enum UserApplicationStatus {
    unsubmitted
    submitted
    accepted
    waitingList @map("waiting_list")
}

enum CvUploadChoice {
    indeterminate
    upload
    remind
    noUpload      @map("no_upload")
}

enum Gender {
    male
    female
    nonBinary         @map("non_binary")
    other
    preferNotToAnswer @map("prefer_not_to_answer")
}

enum Ethnicity {
    american // "American Indian or Alaskan Native"
    asian // "Asian / Pacific Islander"
    black // "Black or African American"
    hispanic //"Hispanic"
    white // "White / Caucasian"
    other // "Multiple ethnicity / Other"
    preferNotToAnswer @map("prefer_not_to_answer") // "Prefer not to answer"
}

enum HackathonExperience {
    zero // "hacka-novice"
    upToTwo      @map("up_to_two") // "hack-tastic tourist"
    threeToSeven @map("three_to_seven") // "hack wizard"
    eightOrMore  @map("eight_or_more") // "hackathon guru"
}
